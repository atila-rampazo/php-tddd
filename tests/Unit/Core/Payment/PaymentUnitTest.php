<?php

namespace Unit\Core;

use Core\Payment\PaymentController;
use Core\Payment\PaymentInterface;
use Mockery;
use PHPUnit\Framework\TestCase;
use stdClass;

class PaymentUnitTest extends TestCase
{
    private stdClass|Mockery\LegacyMockInterface|Mockery\MockInterface|PaymentInterface $mockPayment;

    public function testPayment()
    {
        $this->mockPayment->shouldReceive('makePayment')
            ->once()
            ->andReturn(true);

        $payment = new PaymentController($this->mockPayment);
        $response = $payment->execute();

        $this->assertTrue($response);
    }

    protected function setUp(): void
    {
        $this->mockPayment = Mockery::mock(stdClass::class, PaymentInterface::class);
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    protected function tearDown(): void
    {
        Mockery::close();
        parent::tearDown();
    }
}